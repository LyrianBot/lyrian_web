import React, { useEffect, useState } from "react";

import { Main } from "../../components/layout";
import { MountStatus, Transition } from "../../components/transition";

import style from "./style.module.scss";
import content from "../../styles/content.module.scss";

import modelImg from "../../assets/imgs/docs/docs_model.jpg";
import fixImg from "../../assets/imgs/docs/docs_fix.jpg";
import editImg from "../../assets/imgs/docs/docs_edit.jpg";
import lyricsImg from "../../assets/imgs/docs/docs_lyrics.jpg";

export const Docs = () => {
  const [status, setStatus] = useState<MountStatus>("willMount");

  useEffect(() => {
    if (status === "willMount") setStatus("mounted");
  }, [status]);

  return (
    <Transition status={status}>
      <div className={style.docs}>
        <Main>
          <div className={content.content}>
            <h1>ドキュメント</h1>

            <h3>ToC</h3>
            <ul>
              <li>
                <a href="#Lyrianとは？">Lyrianとは？</a>
              </li>
              <ul>
                <li>
                  <a href="#特徴">特徴</a>
                </li>
              </ul>
              <li>
                <a href="#使い方">使い方</a>
              </li>
              <ul>
                <li>
                  <a href="#1_モデル作成">1. モデル作成</a>
                </li>
                <li>
                  <a href="#2_単語の修正">2. 単語の修正</a>
                </li>
                <li>
                  <a href="#3_歌詞の作成">3. 歌詞の作成</a>
                </li>
                <li>
                  <a href="#4_完成">4. 完成</a>
                </li>
              </ul>
            </ul>

            <h2 id="Lyrianとは？">Lyrianとは？</h2>
            <p>
              Lyrianとは、
              <span className={content.emphasis}>
                マルコフ連鎖を用いた日本語の歌詞生成ツール
              </span>
              です。ユーザーが予め入力した文章の中から単語をランダムに選択し、歌詞生成を行います。
            </p>

            <h3 id="特徴">特徴</h3>

            <h4>1. ランダム性</h4>
            <p>
              Lyrianでは、<span className={content.emphasis}>マルコフ連鎖</span>
              を用いて歌詞生成を行います。マルコフ連鎖とは、ざっくりと説明すると「次の状態が、今現在の状態にのみ依存するようなモデル」のことを言います。
            </p>
            <p>
              例えば、「すもももももももものうち」という文章をマルコフ連鎖を用いて考えてみましょう。この文章を単語レベルで分解し、その単語の次に来うる単語の確率を計算すると以下のようになります。
            </p>
            <ul>
              <li>すもも</li>
              <ul>
                <li>も: 100%</li>
              </ul>
              <li>も</li>
              <ul>
                <li>もも: 100%</li>
              </ul>
              <li>もも</li>
              <ul>
                <li>も: 50%</li>
                <li>の: 50%</li>
              </ul>
              <li>の</li>
              <ul>
                <li>うち: 100%</li>
              </ul>
              <li>うち</li>
              <ul>
                <li>なし</li>
              </ul>
            </ul>
            <p>
              上のテーブルは、例えば「もも」という単語の次に繋がり得る単語は「も」と「の」の2つであり、それぞれ50％の確率で遷移すると捉えているわけです。
            </p>
            <p>
              このように、
              <u>
                過去の状態に依存することなく、現在の状態のみによって、次の状態が決まるようなモデル
              </u>
              をマルコフ連鎖と呼びます。
            </p>
            <p>
              Lyrianでは、上記のような確率テーブルをユーザーが入力した文章から作成し、そのテーブルを基に歌詞生成を行います。つまり、単語を1つランダムに選択し、その単語の次に来得る単語を上記のような確率テーブルの基でランダムに決定し、そしてその単語の次に来得る単語を……といった具合に、
              <b>単語同士を確率的に繋げていくことで歌詞を生成</b>します。
            </p>
            <p>
              こうして生成される歌詞は、文章の文脈やコロケーションなどを無視して生成されるため、
              <span className={content.emphasis}>
                普段では思いつかないユニークな歌詞
              </span>
              を多く生成することができます。
            </p>

            <h4>2. リズミカル</h4>
            <p>
              日本語で歌詞を作成する場合、歌ったときのリズムが平坦になりやすいという特徴があります。それは、日本語が
              <span className={content.emphasis}>モーラ拍リズム</span>
              の言語であることに起因します。
            </p>
            <p>
              モーラ拍リズムを簡単に説明すると、「子音が連続せず、母音単体、または子音＋母音のセットを単語の区切りの一単位とする言語」のことです。
              <br />
              例えば、「音楽」という単語を音節単位で分割すると、「お（o）」「ん（n）」「が（ga）」「く（ku）」の4モーラに分けることができます。
            </p>
            <p>
              一方で、英語などの言語は
              <span className={content.emphasis}>強勢拍リズム</span>
              という言語の分類に該当します。こちらは、「音節主音＋音節副音を単語の区切りの一単位とする言語」のことです（ここでは「音節主音＝基本的に母音」、「音節副音＝音節主音の前後にくっつく子音」程度に捉えてください）。
              <br />
              例えば、"music" という単語を音節単位で分割すると、
            </p>
            <ul>
              <li>mu</li>
              <ul>
                <li>音節主音: u</li>
                <li>音節副音: m</li>
              </ul>
              <li>sic</li>
              <ul>
                <li>音節主音: i</li>
                <li>音節副音: s, c</li>
              </ul>
            </ul>
            <p>といったように2音節に分けることができます。</p>
            <p>
              このモーラ拍リズムと強勢拍リズムが作詞にどう影響するのかというと、
              <b>音符への言葉の割り当て方</b>に違いが出てきます。
            </p>
            <p>
              日本語はモーラ拍リズムの言語であるため、作詞を行うと1つの音符に対して1モーラしか割り当てられない箇所が必然的に多くなり、
              <u>歌ったときのリズムが平坦になりやすい</u>という特徴があります。
            </p>
            <p>
              一方、英語の場合は音節主音＋音節副音を一単位として歌詞を割り振るため、日本語の歌詞と比べたときに1つの音符あたりの音の情報量が多くなり、
              <u>
                楽譜には表記されない、言語自体が持つリズミカルさが音楽にも反映される
              </u>
              という特徴があります。
            </p>
            <p>
              これらの違いはあくまで「特徴」であり、言語自体の「良し悪し」では決してないのですが、英語圏の音楽の影響を強く受けた楽曲を作る際に、こうした言語の違いが障壁となるのもまた事実です。
            </p>
            <p>
              こうした問題を踏まえ、Lyrianでは音符に言葉を割り当てる際に、その言葉のシラブルや無声子音などを考慮することで、
              <span className={content.emphasis}>
                日本語でもリズミカルな歌詞が生成できる
              </span>
              よう工夫しています。
            </p>
            <p>
              シラブルとは、簡単に説明すると「発音しやすい音の区切り」といったものです。
              <br />
              先ほど「音楽」という単語は4モーラであると説明しましたが、この単語を実際に発音してみると、「おん／が／く」という3音節にまとめることができます。
            </p>
            <p>
              さらに、「音楽」の「く（ku）」という音は、次に繋がる音によっては「u」の母音が脱落することがあり、その場合、実際の発音は「おん／がk」のようになります。
            </p>
            <p>
              つまり「音楽」という単語は、モーラ単位では4つの音符が必要となりますが、
              <u>場合によっては2つの音符にも詰め込むことができる</u>
              、というわけです。
            </p>
            <p>
              このようにLyrianには、日本語でリズミカルな歌詞が制作するために、
              <b>1つの音符に対するサウンドの情報量を増やす</b>
              工夫が施されています。
            </p>
            <p className={content.supplement}>
              ※
              無声子音機能は現在開発中。滑らかに繋がりやすい母音の考慮、押韻などの機能も実装予定。
              <br />※ 設定によっては平坦なリズムの歌詞を生成することも可能。
            </p>

            <h2 id="使い方">使い方</h2>
            <p>
              下記で紹介している画像は開発段階のものであり、実際のUIとは異なる場合がございます。
            </p>

            <h3 id="1_モデル作成">1. モデル作成</h3>
            <img src={modelImg} alt="モデル作成" />
            <p>
              ユーザーが入力した文章から、モデルを作成します。モデルには
              <u>文章を品詞単位で分解した単語</u>と、
              <u>その単語が他のどの単語に繋がりうるかを計算した確率テーブル</u>
              が記録されています。
            </p>
            <p>
              <b>「編集中のデータをお持ちの方はこちら」</b>
              というボタンを押すことで、歌詞作成の工程でダウンロードした編集データをインポートすることができ、途中の状態から編集を再開することができます。
            </p>

            <h3 id="2_単語の修正">2. 単語の修正</h3>
            <img src={fixImg} alt="単語の修正" />
            <p>
              モデル作成の工程で文章を単語に分解した際に、読み方や品詞などが分からなかった単語を手動で修正します。
            </p>
            <p>修正項目は以下の通りです。</p>
            <ul>
              <li>
                <b>読み</b>
              </li>
              <ul>
                <li>単語の読み仮名をカタカタで入力します。</li>
                <ul>
                  <li>例：桜 → サクラ</li>
                  <li>例：大空 → オオゾラ</li>
                  <li>例：巻層雲 → ケンソウウン</li>
                </ul>
              </ul>
              <li>
                <b>発音</b>
              </li>
              <ul>
                <li>その単語の発音の仕方をカタカナで入力します。</li>
                <ul>
                  <li>例：桜 → サクラ</li>
                  <li>例：大空 → オーゾラ</li>
                  <li>例：巻層雲 → ケンソーウン</li>
                </ul>
              </ul>
              <li>
                <b>品詞</b>
              </li>
              <ul>
                <li>以下の品詞の中から該当するものを選択します。</li>
                <ul>
                  <li>副詞</li>
                  <li>助動詞</li>
                  <li>助詞</li>
                  <li>動詞</li>
                  <li>名詞</li>
                  <li>形容詞</li>
                  <li>感動詞</li>
                  <li>接続詞</li>
                  <li>接頭詞</li>
                  <li>連体詞</li>
                  <li>未知語</li>
                  <li>フィラー</li>
                  <li>記号</li>
                  <li>その他</li>
                </ul>
                <li>品詞が分からない場合は、「その他」を選択してください。</li>
              </ul>
            </ul>

            <h3 id="3_歌詞の作成">3. 歌詞の作成</h3>
            <img src={editImg} alt="歌詞の作成" />
            <p>
              作成したモデルを基に歌詞を作成します。基本的な使い方は以下の通りです。
            </p>
            <ul>
              <li>
                <b>編集中のデータをダウンロード</b>
              </li>
              <ul>
                <li>
                  現在の編集状態を記録したセーブデータをダウンロードします。
                </li>
                <li>
                  このファイルをモデル作成の段階でインポートすることで、保存した状態から編集を再開することができます。
                </li>
              </ul>
              <li>
                「<i className="icon-arrows-cw" />」
              </li>
              <ul>
                <li>モデルに登録されている単語を用いて歌詞を生成します。</li>
              </ul>
              <li>
                <b>音数</b>
              </li>
              <ul>
                <li>歌詞を割り当てる音符の数を入力します（初期値：3）。</li>
              </ul>
              <li>テキストボックス</li>
              <ul>
                <li>生成された歌詞を表示します。</li>
              </ul>
              <li>
                「<i className="icon-down-open" />
                」「
                <i className="icon-up-open" />」
              </li>
              <ul>
                <li>歌詞生成に関する詳細設定の表示・非表示を行います。</li>
              </ul>
              <li>
                <b>割り当て単位</b>
              </li>
              <ul>
                <li>
                  音符に対する単語の割り当て方を、シラブルかモーラかを選択します（初期値：シラブル）。
                </li>
              </ul>
            </ul>
            <p>
              Lyrianを用いた歌詞作成のコツとして、
              <span className={content.emphasis}>
                「更新ボタンを押しまくる」
              </span>
              と
              <span className={content.emphasis}>
                「アイデアのきっかけとして用いる」
              </span>
              という2つがあります。
            </p>
            <p>
              1つ目は単純に、直感的に良いと感じるフレーズが出てくるまで、とにかく更新ボタンを押しまくろう、というものです。
              <br />
              このアプリケーションはいわば<b>「作詞ガチャ」</b>
              なので、必ずしも1発目でSSR級のフレーズが生まれるわけではありません。なので、少しでもイマイチだと感じた歌詞は遠慮なく切り捨て、よりビビッと来るものを探し求めたほうが結果的に良い歌詞が生まれやすくなります。
            </p>
            <p>
              2つ目は、Lyrianに全自動の作詞を求めるのではなく、アイデアのきっかけをLyrianに手伝ってもらうようにしよう、ということです。
              <br />
              Lyrianは前後の文脈を無視して歌詞を生成するため、単純にボタンをポチポチするだけでは奇天烈な歌詞しか生まれません。なので、提案された歌詞を修正して使ったり、制作中に自分で思いついたフレーズを使うといったように、Lyrianが生成した歌詞を絶対視するのではなく、アイデアのきっかけとして用いることで、Lyrianの長所を活かしてあげましょう。
            </p>

            <h3 id="4_完成">4. 完成</h3>
            <img src={lyricsImg} alt="完成" />
            <p>
              完成された歌詞がテキストエリアに表示されます。コピーボタンを押すことで、歌詞の全文をクリップボードにコピーすることができます。
            </p>
            <p>
              もしよろしければ、Lyrianを使ったことを共有していただけるとこのアプリの開発者が喜びます。
            </p>
          </div>
        </Main>
      </div>
    </Transition>
  );
};
